import React, { useState, useCallback } from 'react';
import type { Category, StoryResult } from '../types';
import { CATEGORIES } from '../constants';
import { generateStoryContent } from '../services/geminiService';
import { SparklesIcon } from './Icons';
import CategoryCard from './CategoryCard';
import ResultDisplay from './ResultDisplay';

const StorytellerPage: React.FC = () => {
  const [selectedCategory, setSelectedCategory] = useState<Category>(CATEGORIES[0]);
  const [prompt, setPrompt] = useState<string>('');
  const [isLoading, setIsLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [result, setResult] = useState<StoryResult | null>(null);

  const handleGenerate = useCallback(async () => {
    if (!prompt || isLoading) return;

    setIsLoading(true);
    setError(null);
    setResult(null);

    try {
      const storyResult = await generateStoryContent(prompt, selectedCategory.name);
      setResult(storyResult);
    } catch (err) {
      setError(err instanceof Error ? err.message : 'An unknown error occurred.');
    } finally {
      setIsLoading(false);
    }
  }, [prompt, selectedCategory, isLoading]);

  return (
    <div className="space-y-12">
      <div>
        <p className="text-gray-400">Welcome to Cultural Storyteller</p>
        <h1 className="text-4xl md:text-5xl font-bold text-white">Discover stories from around the world</h1>
      </div>

      <div className="space-y-4">
        <h2 className="text-xl font-semibold text-white">Choose a Category</h2>
        <div className="grid grid-cols-2 md:grid-cols-3 lg:grid-cols-6 gap-4">
          {CATEGORIES.map((cat) => (
            <CategoryCard
              key={cat.id}
              category={cat}
              isSelected={selectedCategory.id === cat.id}
              onSelect={() => setSelectedCategory(cat)}
            />
          ))}
        </div>
      </div>

      <div className="bg-card-bg p-6 rounded-2xl space-y-6">
        <h2 className="text-xl font-semibold text-brand-yellow">Create Your Story</h2>
        <div className="bg-white p-4 rounded-lg border-2 border-transparent focus-within:border-brand-yellow transition-colors duration-300">
          <textarea
            value={prompt}
            onChange={(e) => setPrompt(e.target.value)}
            placeholder="Describe the story you'd like to hear... (e.g., 'Tell me about the legend of King Arthur from Celtic tradition')"
            className="w-full h-24 bg-transparent border-none focus:ring-0 p-0 text-gray-800 placeholder-gray-500 resize-none"
          />
        </div>
        <div className="border-t border-gray-700 pt-4 flex justify-between items-center">
          <p className="text-sm text-gray-400">
            Category: <span className="font-semibold text-brand-yellow">{selectedCategory.name}</span>
          </p>
          <button
            onClick={handleGenerate}
            disabled={isLoading || !prompt}
            className="flex items-center space-x-2 bg-brand-yellow hover:bg-brand-yellow-dark disabled:bg-gray-500 text-black font-bold py-2 px-5 rounded-full transition-all duration-200 disabled:cursor-not-allowed"
          >
            <SparklesIcon className="w-5 h-5"/>
            <span>{isLoading ? 'Generating...' : 'Generate Story'}</span>
          </button>
        </div>
      </div>

      <ResultDisplay isLoading={isLoading} error={error} result={result} />

      <div className="space-y-4">
        <h2 className="text-xl font-semibold text-white">Featured Stories</h2>
        <p className="text-gray-500">Explore stories generated by our community.</p>
      </div>
    </div>
  );
};

export default StorytellerPage;